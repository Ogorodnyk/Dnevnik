# 14.09.2019
""" Praca z GitHUB
1. Klonujemy repozytorium - "git clone adres_repozytorium"
2. Po zmianie pliku przygotowujemy go do dodania
"git add nazwa_pliku" (jeżeli chcemy wskazać konkretny plik),
"git add ." (jeżeli chcemy dodać wszystkie zmienione pliki)
3. Dodajemy komentarz ze zmnianami "git commit -m "nazwa_commita""
4. Wypychamy go do GitHUB "git push"  lub "gitpush origin master"
5. Jeżeli chcemy oddać na sprawdzenie lub do koncowego projektu na samym GitHUB używamy "pull request"
"""
########################################################################
"""
1. Zmienne w Pythonie
"""
a = 15  Zmienna Typu Int (Liczba Całkowita)
b = 15.0 Zmienna Typu Float (Liczba Naturalna)
c = "15" Zmienna Typu String (Napis)
d = [15] Zmienna Typu List (Lista)
e = (15,15) Zmienna Typu Tuple (Lista której się nie da zmienić zawartości)
g = {15} Zmeinna Typu Set, (Zbiór,w którym nie ma dwóch lub więcej identycznych elementów )
h = {15:15} Zmienna Typu Dict  (Slownik {Klucz:Wartość})
j = range(15) Zmienna typu Range (od 0 do 14)
k = True Zmienna typu Bool (Wartośc logiczna, Prawda lub Falsz)

"""
2. Operacje aryfmetyczne
"""
Dodawanie    3 + 2 ---->>>> 5
Odejmowanie  3 - 2 ---->>>> 1
Dzielenie    3/2 ----->>>>> 1.5
Mnożenie     3*2 ----->>>>> 6
Podniesienie do stopnia 3**2 --->>> 9
Perwiastek   import math   math.sqrt(9) ----->>>>>> 3.0
Dzielenie bez reszty  81 // 2 ------>>>>> 40
Wynik reszty od Dzielenia 81 % 2 ----->>>> 1

"""
3. Warunki Pętla for/ Pętla While / If / Elif / Else  / Pass
"""
Pętla for przebiega po wszystkim danym (liczbam) w podanym zakresie sprawdza i daje spełnia ten warunek, który chcemy zarobić z tym zestawem dannych


for number in range (5):   # Dla Wszystkich liczb w zakresie od 0 do 4 (5-1) ,
    print(number)          #wydrukuj ich znaczenie
--->>>
0
1
2
3
4


Winter_Month = ["Grudzień", "Styczeń", "Luty"]  # Podana lista z Miesiacami Zimowymi
for month in Winter_Month:   #Dla każdego miesiąca w Miesiącach zimowych
    print(month)            # Wydrukuj jego nazwe
--->>>
Grudzień
Styczeń
Luty

Summer = "Lato"    #Podany napis Summer o znaczeniu "Lato"
for letters in Summer: # dla kazdej litery w napisie "Lato"
    print(letters) # Wydrukuj jej znaczenie
--->>>
L
a
t
o
##############################################################################

Pętla while wykonuje się dopóki jakiś warunek logiczny jest spełniony

start = 0   # Start  = 0
while start < 5:  # Dopoki start jest mniejszy od 5
    print (start), # Drukuj Wszystkie liczby od 0 do tej liczby która mniejsza od 5
    start += 1  # Start po każdym sprawdzeniu liczby zwiększa się o 1
--->>>
0
1
2
3
4

##########################################################################
Warunek if sprawdza czy zachodzi modelowana nami sytuacja i w zależności od sytuacji daje oczekiwany Wynik

for letter in 'hello world':  #Dla każdej litery w wyrazie "hello world"
    if letter == 'h':  # jeżeli jedna z litter równa się h
        print("Yes")  # wydrukuj słowo Yes

--->>> Yes

#############################################################################
Warunek elif dodatkowo sprawdza po if czy zachodzi jakaś inna modelowana sytuacja

for letter in 'hello world': #Dla każdej litery w wyrazie "hello world"
    if letter == 'x':  # jeżeli jedna z litter równa się x
        print("Yes")  # wydrukuj słowo Yes, w dannym przypadku żadna littera nie równa sie "x"
    elif letter == "e": # sprawdzamy dalej , jeżeli if się nie odbylo to jest Elif, sprawdzamy czy littera "e" jest w wyrazie
        print("Yes")  # taka littera jest, dla tego drukujemyu "Yes"

--->>> Yes

#############################################################################

Warunek else wykonuje swoje zadanie w razie gdy pierwszy zadanny warunek nie wykonuje się

for letter in 'hello world': #Dla każdej litery w wyrazie "hello world"
    if letter == 'x':# jeżeli jedna z litter równa się x
        print("Yes") # wydrukuj słowo Yes
else:  # w innym przypadku
    print("No")        #wydrukuj "No"
#Sprawdzamy czy litera jest w wyrazie, okazuję się że jej nie ma, wychodzimy z pętli i drukujemy "No"

--->>> No
##############################################################################
Warunek pass , warunek w przypadku jego zaistnienia , nic się nie zwraca i nie drukuje sie, pomaga nie wywalać blędu programu gdy nie chemy żadnego wyniki pewnej sytuacji

for letter in 'hello world': #Dla każdej litery w wyrazie "hello world"
    if letter == 'h':  # jeżeli jedna z litter równa się x
            pass  # nic nie rób , zakończ dany warunek bez rezultatu


"""4. Tworzenie funkcji """
def square(num):   # def określa że tworzymy funckję, pod def idzie nazwa funckji "square" i jakie dane jej musimy podać "num"
    return num ** 2 # funckja zwraca podanną wartość "num " podniesioną do drugiej potęgi

def square_print(num): # "def" (tworzymy funckje) square_print(o nazwie) , pobieramy num(wartość)
    print(num ** 2) # funckja drukuje num podniesiony do drugiej potęgi

Opcja return zwraca jakiś wynik i póżniej my możemy z tym wynikiem coś zrobić, natomiast print po prostu drukuje jakiś tekst

def func(a,b):  # funckja przyjmuje dwa paramtry (a , b....mogą byc jakiekolwiek dane)
    return a+b  # Zwraca sume dwoch paramtetro

def func2():  # funkcja nie przejmuje paramentrow
    a = 10  # a = 10
    b = 11  # b = 11
    suma = func(a,b) # okresamy ze zmienna suma == funckjci funkc ktora dodaje dwie zmienne
    print(suma)  # drukujemy sume

print(func(5,6))    ----->>>>> 11
func2()             ----->>>>> 21
func2(1,2)             ----->>>>> TypeError: func2() takes 0 positional arguments but 2 were given

W powyzszych przykladach func zwraca sume dodawania dwóch zmiennych, a func dwa tylko drukuje.
Przykład z życia :
Stoisz w kolejce za wypłatą, nadeszła twoja kolej i kasjer mówi:
print - "Tutaj jest twoja wypłata" , pokazuje wypłatę i chowa z powrotem
return Kasjer wydaje tobie wypłate

return zwraca znaczenie z funkcji , print natomiast jest sama w sobie funckją , która wykonuje drukowanie wyrazu

""" 5. Opcjonalny argument w funcji """

Opcjonalny argument w funckji, jest to argument , który bierze udział w funcji, lecz nie musi być podawany przez użytkowanika
Jeżeli użytkownik go nie poda to on będzie zawsze taki jaki jest podany przy tworzeniu funckcji
tworzymy go za pomocą znaku równości =

def power(base, exponent=2):
    return base**2

print(power(3))  ------->>>>>>>>> 9 
